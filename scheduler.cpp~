#include <bits/stdc++.h>
#include <signal.h>
#include <sys/types.h>
#include <errno.h>
#include <unistd.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <semaphore.h>
#include <pthread.h>
#include <sys/wait.h>
#include <sys/ipc.h>
#include <sys/shm.h>

using namespace std;

void die(char *s)
{
    perror(s);
    exit(1);
}

struct listPid
{
    int child_pid[2];
    int child_size[2];
};

int main()
{
    
    int shmid;
    key_t key,key1;
    struct listPid *tt, *lt;

    key = 1234;
    key1 = 1111;
    int process_id = getpid();

    int *spid,*pid;
 
    if ((shmid = shmget(key, sizeof(struct listPid), IPC_CREAT | 0666)) < 0)
        die("shmget");
 
    if ((tt = (struct listPid *)shmat(shmid, NULL, 0)) == (struct listPid *) -1)
        die("shmat");

    lt = tt;

    
    if ((shmid = shmget(key1, sizeof(int), IPC_CREAT | 0666)) < 0)
        die("shmget");
 
    if ((pid = (int *)shmat(shmid, NULL, 0)) == (int *) -1)
        die("shmat");

    spid = pid;
    *spid = process_id;


    /*
    // First Come First Serve Algorithm
    for(int i=0;i<2;i++)
    {
    	kill(lt->child_pid[i], SIGCONT);
        kill(process_id, SIGSTOP);
    }
    */

    /*
    // Shortest job First
    pair<int, int> p[2];
    for(int i=0;i<2;i++)
    {
        p[i].first = lt->child_size[i];
        p[i].second = lt->child_pid[i];
    }

    sort(p, p+2);

    for(int i=0;i<2;i++)
    {
        kill(p[i].second, SIGCONT);
        kill(process_id, SIGSTOP);
    }
    */

    // Round Robin Algorithm
    while(1)
    {
        
    }

	return 0;
}